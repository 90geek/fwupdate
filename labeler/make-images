#!/usr/bin/python3
""" This thing rasterizes text for use later """

# pylint: disable=wrong-import-position,too-many-locals,unused-argument

import os
import sys
import gettext
import math
import cairo
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Pango', '1.0')
gi.require_version('PangoCairo', '1.0')
from gi.repository import Pango, PangoCairo

def usage(return_code):
    """ print usage and exit with the supplied return code """
    if return_code == 0:
        out = sys.stdout
    else:
        out = sys.stderr
    out.write("usage: make-images <label> <font> <pattern>")
    sys.exit(return_code)

class Rasterizer:
    """ Rasterize some text """

    def __init__(self, label, font_face="sans-serif",
                 pattern="{directory}/{language}-{width}-{height}.png",
                 directory="."):
        self.text = label
        self.pattern = pattern
        self.directory = directory
        self.font_face = font_face

        self.fontmap = PangoCairo.font_map_get_default()

    def render(self):
        """ Do the work... """
        def render_one(language, string, width, height, filename):
            """ Do the work... """

            font_desc = "Sans %fpx" % (height / 16,)
            fd = Pango.FontDescription(font_desc)
            fo = cairo.FontOptions()
            fo.set_antialias(cairo.ANTIALIAS_SUBPIXEL)
            l = Pango.Language.from_string(language)

            img = cairo.ImageSurface(cairo.FORMAT_RGB24, 1, 1)
            cctx = cairo.Context(img)
            layout = PangoCairo.create_layout(cctx)
            pctx = layout.get_context()
            pctx.set_font_description(fd)
            pctx.set_language(l)
            fs = pctx.load_fontset(fd, l)
            PangoCairo.context_set_font_options(pctx, fo)

            attrs = Pango.AttrList()
            length = len(bytes(string, "utf8"))
            items = Pango.itemize(pctx, string, 0, length, attrs, None)
            gs = Pango.GlyphString()
            Pango.shape(string, length, items[0].analysis, gs)

            def find_size(fs, f, data):
                """ find our size, I hope... """
                (ink, log) = gs.extents(f)
                print("ink.(height,width,x,y): %s,%s,%s,%s" % (ink.height,
                                                               ink.width,
                                                               ink.x, ink.y))
                print("log.(height,width,x,y): %s,%s,%s,%s" % (log.height,
                                                               log.width,
                                                               log.x, log.y))
                if ink.height == 0 and ink.width == 0:
                    return False
                data.update({"log": log, "ink": ink})
                return True
            data = {}
            fs.foreach(find_size, data)

            log = data['log']
            ink = data['ink']

            height = math.ceil(max(ink.height, log.height) / Pango.SCALE)
            width = math.ceil(max(ink.width, log.width) / Pango.SCALE)

            x = -math.ceil(log.x / Pango.SCALE)
            y = -math.ceil(log.y / Pango.SCALE)

            del img, cctx, pctx, layout
            img = cairo.ImageSurface(cairo.FORMAT_RGB24, width, height)
            cctx = cairo.Context(img)
            layout = PangoCairo.create_layout(cctx)
            pctx = layout.get_context()
            PangoCairo.context_set_font_options(pctx, fo)

            cctx.set_source_rgb(1, 1, 1)
            cctx.move_to(x, y)
            def do_write(fs, f, data):
                """ write out glyphs """
                ink = gs.extents(f)[0]
                if ink.height == 0 or ink.width == 0:
                    return False
                PangoCairo.show_glyph_string(cctx, f, gs)
                return True
            fs.foreach(do_write, None)
            img.flush()
            print("Writing %s" % (filename,))
            img.write_to_png(filename)

        strings = self.getStrings()
        for lang, string in strings.items():
            #print("lang:\"%s\" string:\"%s\"" % (lang, string))
            # these are the 1.6:1 of some common(ish) screen widths
            sizes = ((640, 480), (800, 600), (1024, 768), (1920, 1080),
                     (3840, 2160), (5120, 2880), (5688, 3200), (7680, 4320))
            nameinfo = {
                'directory': self.directory,
                'language': lang,
            }
            for width, height in sizes:
                nameinfo.update({'width': width,
                                 'height': height})
                filename = self.pattern.format_map(nameinfo)
                render_one(lang, string, width, height, filename)

    def getStrings(self):
        """ Find all of our strings for the text """
        languages = []
        for stuff in os.walk('/usr/share/locale'):
            languages += stuff[1]
            break
        #print("languages: %s" % (languages,))
        strings = {}
        for language in languages:
            #if not language.startswith("hi"):
            #    continue
            for sep in [".", "@"]:
                if sep in language:
                    real = language[language.index(sep):]
                    if real in strings:
                        continue
                    else:
                        language = real
            try:
                tl = gettext.translation("fwupd",
                                         localedir="/usr/share/locale",
                                         languages=[language])
                strings[language] = tl.gettext(self.text)
            except FileNotFoundError:
                pass
        strings['C'] = self.text
        return strings


if __name__ == '__main__':
    need_help = {'-?', '--help', '--usage'}.intersection(set(sys.argv))
    if need_help:
        usage(0)

    r = Rasterizer(label=sys.argv[1])
    r.render()
